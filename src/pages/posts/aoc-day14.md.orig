---
layout: '@/templates/BasePost.astro'
title: Advent of Code - Day 14
description: Solve Advent of Code Day 14 with Kevin
pubDate: 2024-12-15T05:00:00Z
imgSrc: '/assets/images/code-challenge.jpg'
imgAlt: Photo by Lewis Kangethe Ngugi on Unsplash'
---



## Problem 1


One of The Historians needs to use the bathroom; fortunately, you know there's a bathroom near an unvisited location on their list, and so you're all quickly teleported directly to the lobby of Easter Bunny Headquarters.

Unfortunately, EBHQ seems to have "improved" bathroom security again after your last visit. The area outside the bathroom is swarming with robots!

To get The Historian safely to the bathroom, you'll need a way to predict where the robots will be in the future. Fortunately, they all seem to be moving on the tile floor in predictable straight lines.

You make a list (your puzzle input) of all of the robots' current positions (p) and velocities (v), one robot per line. For example:

p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3
Each robot's position is given as p=x,y where x represents the number of tiles the robot is from the left wall and y represents the number of tiles from the top wall (when viewed from above). So, a position of p=0,0 means the robot is all the way in the top-left corner.

Each robot's velocity is given as v=x,y where x and y are given in tiles per second. Positive x means the robot is moving to the right, and positive y means the robot is moving down. So, a velocity of v=1,-2 means that each second, the robot moves 1 tile to the right and 2 tiles up.

The robots outside the actual bathroom are in a space which is 101 tiles wide and 103 tiles tall (when viewed from above). However, in this example, the robots are in a space which is only 11 tiles wide and 7 tiles tall.

The robots are good at navigating over/under each other (due to a combination of springs, extendable legs, and quadcopters), so they can share the same tile and don't interact with each other. Visually, the number of robots on each tile in this example looks like this:

1.12.......
...........
...........
......11.11
1.1........
.........1.
.......1...
These robots have a unique feature for maximum bathroom security: they can teleport. When a robot would run into an edge of the space they're in, they instead teleport to the other side, effectively wrapping around the edges. Here is what robot p=2,4 v=2,-3 does for the first few seconds:

Initial state:
...........
...........
...........
...........
..1........
...........
...........

After 1 second:
...........
....1......
...........
...........
...........
...........
...........

After 2 seconds:
...........
...........
...........
...........
...........
......1....
...........

After 3 seconds:
...........
...........
........1..
...........
...........
...........
...........

After 4 seconds:
...........
...........
...........
...........
...........
...........
..........1

After 5 seconds:
...........
...........
...........
.1.........
...........
...........
...........
The Historian can't wait much longer, so you don't have to simulate the robots for very long. Where will the robots be after 100 seconds?

In the above example, the number of robots on each tile after 100 seconds has elapsed looks like this:

......2..1.
...........
1..........
.11........
.....1.....
...12......
.1....1....
To determine the safest area, count the number of robots in each quadrant after 100 seconds. Robots that are exactly in the middle (horizontally or vertically) don't count as being in any quadrant, so the only relevant robots are:

..... 2..1.
..... .....
1.... .....
           
..... .....
...12 .....
.1... 1....
In this example, the quadrants contain 1, 3, 4, and 1 robot. Multiplying these together gives a total safety factor of 12.

Predict the motion of the robots in your list within a space which is 101 tiles wide and 103 tiles tall. What will the safety factor be after exactly 100 seconds have elapsed?

As a junior developer, I'll break down Problem 27 and provide a detailed explanation and approach:
Problem Breakdown:
We have a list of robots with their initial positions and velocities.
The robots move in a 101x103 grid, wrapping around the edges.
We need to simulate their movement for 100 seconds.
After 100 seconds, we need to count the robots in each quadrant and multiply these counts.
Inputs:
A list of robots, each with:
Initial position (x, y)
Velocity (vx, vy)
Outputs:
The safety factor (multiplication of robot counts in each quadrant)
Constraints:
Grid size: 101x103
Simulation time: 100 seconds
Robots wrap around edges
Robots on the middle lines don't count for any quadrant
Approach:
Parse the input file to get robot positions and velocities.
Simulate robot movement for 100 seconds.
Count robots in each quadrant.
Calculate the safety factor.

This code reads the input, simulates the robot movement, counts robots in each quadrant, and calculates the safety factor. It's a straightforward implementation that follows the problem description closely.
However, this solution might be slow for a large number of robots or a long simulation time. A more optimized solution could use mathematical properties to predict final positions without simulating each second, but that would be beyond what a junior developer might initially implement.

To solve Problem 27, we employed the following key strategies:
Input parsing: We correctly extracted the initial positions and velocities of each robot from the input file.
Simulation of robot movement: We implemented a function to simulate the movement of robots over 100 seconds, taking into account the wrapping behavior at the edges of the 101x103 grid.
Efficient position updating: Instead of simulating each second individually, we used modular arithmetic to directly calculate the final positions after 100 seconds. This significantly improved the performance of our solution.
Quadrant counting: We divided the grid into four quadrants and counted the number of robots in each quadrant after the simulation. We carefully handled the edge cases where robots were exactly on the middle lines, excluding them from the count as per the problem description.
Safety factor calculation: We multiplied the robot counts from all four quadrants to obtain the final safety factor.
This approach allowed us to efficiently handle the large number of robots and the relatively long simulation time, while correctly implementing the wrapping behavior and quadrant counting rules specified in the problem

## Problem 2


During the bathroom break, someone notices that these robots seem awfully similar to ones built and used at the North Pole. If they're the same type of robots, they should have a hard-coded Easter egg: very rarely, most of the robots should arrange themselves into a picture of a Christmas tree.

What is the fewest number of seconds that must elapse for the robots to display the Easter egg?

As a junior developer, I'll break down Problem 28 and provide a detailed explanation and approach:
Problem Breakdown:
We have the same set of robots from Problem 27 with their initial positions and velocities.
The robots move in a 101x103 grid, wrapping around the edges.
We need to find the earliest time when most robots form a Christmas tree pattern.
Inputs:
A list of robots, each with:
Initial position (x, y)
Velocity (vx, vy)
Output:
The fewest number of seconds that must elapse for the robots to display the Easter egg (Christmas tree pattern)
Constraints:
Grid size: 101x103
Robots wrap around edges
We need to check for a Christmas tree pattern at each second
Approach:
Parse the input file to get robot positions and velocities (same as Problem 27).
Implement a function to update robot positions for each second.
Create a function to check if the current robot positions form a Christmas tree pattern.
Simulate the robot movement second by second until the pattern is found.

This code simulates the robot movement and checks for a Christmas tree pattern at each second. The is_christmas_tree function uses a very simple check for a triangular shape and a trunk, which may need to be refined based on the exact pattern we're looking for.
Note that this solution might be slow for a large number of robots or if it takes many seconds for the pattern to appear. A more optimized solution could involve finding cycles in the robot movements or using more efficient data structures, but this approach gives a straightforward starting point for solving the problem.