---
layout: '@/templates/BasePost.astro'
title: Advent of Code - Day 8
description: Solve Advent of Code Day 8 with Kevin
pubDate: 2024-12-09T05:00:00Z
imgSrc: '/assets/images/code-challenge.jpg'
imgAlt: 'Photo by Lewis Kangethe Ngugi on Unsplash'
---



## Problem 1



As a junior developer, I'll break down Problem 15 and provide an approach to solve it:
Inputs:
A map of antennas represented by a grid of characters (from the attached file 'aoc-day7-input.txt')
Each antenna is represented by a lowercase letter, uppercase letter, or digit
Empty spaces are represented by '.'
Output:
The number of unique locations within the map that contain an antinode
Constraints:
Antinodes occur when two antennas of the same frequency are in line, with one twice as far from the point as the other
Antinodes can occur at locations that contain antennas
The map has boundaries, and we only count antinodes within these boundaries
Approach:
Parse the input file to create a 2D grid representing the map
Find all antenna locations and their frequencies
For each pair of antennas with the same frequency:
a. Calculate potential antinode locations
b. Check if the antinodes are within the map boundaries
c. Add valid antinodes to a set of unique locations
Count the number of unique antinode locations

This implementation does the following:
Parses the input file to create a 2D grid
Finds all antennas and groups them by frequency
For each pair of antennas with the same frequency, calculates potential antinode locations
Checks if the antinodes are within the map boundaries
Adds valid antinodes to a set of unique locations
Counts and returns the number of unique antinode locations
To use this code:
Ensure the input file 'aoc-day7-input.txt' is in the same directory as the script
Run the script in a Python environment
The script will output the number of unique locations within the bounds of the map that contain an antinode.

In solving Problem 15, we encountered several challenges and made corresponding adjustments to our code:
Grid representation: We initially parsed the input file to create a 2D grid representing the antenna map. This allowed for efficient access to antenna positions and frequencies.
Antenna identification: We implemented a function to find all antennas and group them by frequency. This was crucial for identifying potential antinode locations.
Antinode calculation: The main challenge was accurately calculating antinode positions. We had to ensure that we only considered antinodes that were exactly twice the distance between two antennas of the same frequency.
Boundary checking: We implemented a function to check if calculated antinode positions were within the map boundaries. This was necessary to avoid counting antinodes outside the given area.
Unique antinode tracking: To prevent overcounting, we used a set data structure to store unique antinode positions.
Efficiency concerns: With potentially large maps and many antennas, we had to optimize our approach to avoid excessive runtime. This included early termination of loops when possible and efficient data structures.
Edge cases: We had to account for scenarios where antennas might be positioned at the map edges or corners.
Precision in calculations: We ensured that our distance calculations were precise, using integer arithmetic to avoid floating-point errors.
Loop detection: We removed unnecessary loop checking from our initial implementation, as it wasn't relevant to this problem.
Result verification: We implemented additional checks to verify our results, including counting the total number of antennas and ensuring that our antinode count was reasonable given the input size.
These iterative improvements led to a more robust and efficient solution that correctly identifies and counts the unique antinode locations within the map boundaries.

## Problem 2


As a junior developer, I'll break down Problem 16 and provide an approach to solve it:
Inputs:
The same map of antennas from Problem 15 (file 'day8-input.txt')
Each antenna is represented by a lowercase letter, uppercase letter, or digit
Empty spaces are represented by '.'
Output:
The number of unique locations within the map that contain an antinode
Constraints:
Antinodes occur at any grid position exactly in line with at least two antennas of the same frequency
Antinodes can occur at antenna locations (unless it's the only antenna of its frequency)
We only count antinodes within the map boundaries
Approach:
Reuse the parsing function from Problem 15 to read the input file
Modify the find_antennas function to group antennas by frequency
Create a new function to find antinodes based on the updated rules
Use a set to store unique antinode locations
Count the number of unique antinode locations

This implementation builds upon our solution from Problem 15, with the following changes:
Updated find_antinodes function to implement the new rules for antinode creation
Checks for horizontal and vertical lines with at least two antennas of the same frequency
Adds antenna positions as antinodes (unless it's the only antenna of its frequency)
Uses a set to store unique antinode locations
This solution should handle the updated rules for antinode creation and provide the total number of unique antinode locations within the map boundaries.

Throughout the development process for solving Problem 16, we encountered several key issues that affected our ability to correctly calculate the number of unique antinode locations based on the alignment of antennas in a grid. Below is a detailed account of the problems faced and the changes made to address them.
1. Initial Misunderstanding of Antinode Definition
Issue: The initial attempts did not fully capture the requirement that an antinode occurs at any grid position that is exactly in line with at least two antennas of the same frequency.
Solution: We refined our understanding and implementation to ensure that we checked all pairs of antennas and calculated potential antinode positions based on their alignments.
2. Line Calculation Logic
Issue: The early versions of the line calculation did not accurately account for diagonal lines, leading to missed points.
Solution: We implemented a method using the greatest common divisor (GCD) to normalize step increments when calculating line points. This ensured that all points along the line between two antennas were captured correctly.

3. Grid Representation and Mutability
Issue: The grid was initially represented as a list of strings, which are immutable in Python. Attempts to modify specific positions resulted in TypeErrors.
Solution: We changed the grid representation to a list of lists, allowing us to modify individual characters directly when marking positions as visited.

4. Boundary Checking
Issue: There were instances where calculated positions could fall outside the grid boundaries, leading to potential errors.
Solution: We implemented a boundary checking function (is_inbounds) to ensure that all calculated positions were valid before attempting to access or modify them.

5. Unique Antinode Tracking
Issue: Early implementations did not effectively manage unique antinode positions, leading to incorrect counts.
Solution: We utilized a set (antinodes_set) to track unique positions efficiently, ensuring that duplicates were not counted.

6. Debugging Output
Issue: Debugging was initially limited, making it difficult to trace errors or understand where calculations went wrong.
Solution: We added print statements throughout the code to output intermediate values and track how many positions were being added to antinodes_set.

Conclusion
Through iterative refinements and careful debugging, we successfully addressed each issue encountered while developing a solution for Problem 16. The final implementation accurately calculates the number of unique antinode locations by effectively managing antenna positions, calculating lines correctly, ensuring mutability of the grid representation, and maintaining clear boundary checks.
By leveraging insights from confirmed working code and community discussions, we improved our approach significantly. This collaborative effort illustrates the importance of thorough testing and validation when solving complex coding challenges like those presented in Advent of Code.

In today's set of challenges from the Advent of Code, we tackled problems that progressively built upon concepts of data structure manipulation, line calculations, and boundary checks. Below is a detailed overview of what we learned and how we addressed the issues encountered in each problem.

Problem 15: Boundary Checking and Mutability
Challenge: We encountered issues related to modifying our grid representation. The grid was initially a list of strings, leading to errors when attempting to mark visited positions.
Learning: We adapted our grid representation to a list of lists, allowing for mutable operations. This change was crucial for marking positions as visited without encountering type errors.
Problem 16: Advanced Antinode Calculation
Challenge: The final problem required us to accurately count unique antinode locations based on antenna alignments. We initially struggled with counting logic and ensuring all unique positions were tracked correctly.
Learning:
We implemented a breadth-first search (BFS) approach to explore potential antinode positions based on differences between pairs of antennas.
We used a set to track unique antinode locations efficiently, ensuring duplicates were not counted.
Boundary checking was reinforced with a dedicated function (is_inbounds) to prevent out-of-bounds errors during calculations.

Key Changes Made Across Problems
Data Structure Utilization:
Employed defaultdict for efficient grouping of antenna positions.
Used sets for tracking unique antinode positions.
Line Calculation Improvements:
Implemented GCD-based line point calculation to ensure all relevant points were captured.
Mutable Grid Representation:
Changed the grid from a list of strings to a list of lists, allowing for direct modifications.
Boundary Checking:
Introduced robust boundary checking functions to prevent out-of-bounds errors during calculations.
Debugging Enhancements:
Added print statements throughout the code to track intermediate values and ensure correctness in calculations.
Conclusion
Through these problems, we gained valuable insights into handling complex data manipulations and calculations in Python. Each challenge built upon the previous one, reinforcing our understanding of effective coding practices and problem-solving strategies. The collaborative effort in refining our approach illustrates the importance of iterative development and thorough testing in programming challenges like those presented in Advent of Code.