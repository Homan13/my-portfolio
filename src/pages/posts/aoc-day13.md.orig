---
layout: '@/templates/BasePost.astro'
title: Advent of Code - Day 13
description: Solve Advent of Code Day 13 with Kevin
pubDate: 2024-12-14T05:00:00Z
imgSrc: '/assets/images/code-challenge.jpg'
imgAlt: 'Photo by Lewis Kangethe Ngugi on Unsplash'
---



## Problem 1



Next up: the lobby of a resort on a tropical island. The Historians take a moment to admire the hexagonal floor tiles before spreading out.

Fortunately, it looks like the resort has a new arcade! Maybe you can win some prizes from the claw machines?

The claw machines here are a little unusual. Instead of a joystick or directional buttons to control the claw, these machines have two buttons labeled A and B. Worse, you can't just put in a token and play; it costs 3 tokens to push the A button and 1 token to push the B button.

With a little experimentation, you figure out that each machine's buttons are configured to move the claw a specific amount to the right (along the X axis) and a specific amount forward (along the Y axis) each time that button is pressed.

Each machine contains one prize; to win the prize, the claw must be positioned exactly above the prize on both the X and Y axes.

You wonder: what is the smallest number of tokens you would have to spend to win as many prizes as possible? You assemble a list of every machine's button behavior and prize location (your puzzle input). For example:

Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=8400, Y=5400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=12748, Y=12176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=7870, Y=6450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=18641, Y=10279
This list describes the button configuration and prize location of four different claw machines.

For now, consider just the first claw machine in the list:

Pushing the machine's A button would move the claw 94 units along the X axis and 34 units along the Y axis.
Pushing the B button would move the claw 22 units along the X axis and 67 units along the Y axis.
The prize is located at X=8400, Y=5400; this means that from the claw's initial position, it would need to move exactly 8400 units along the X axis and exactly 5400 units along the Y axis to be perfectly aligned with the prize in this machine.
The cheapest way to win the prize is by pushing the A button 80 times and the B button 40 times. This would line up the claw along the X axis (because 80*94 + 40*22 = 8400) and along the Y axis (because 80*34 + 40*67 = 5400). Doing this would cost 80*3 tokens for the A presses and 40*1 for the B presses, a total of 280 tokens.

For the second and fourth claw machines, there is no combination of A and B presses that will ever win a prize.

For the third claw machine, the cheapest way to win the prize is by pushing the A button 38 times and the B button 86 times. Doing this would cost a total of 200 tokens.

So, the most prizes you could possibly win is two; the minimum tokens you would have to spend to win all (two) prizes is 480.

You estimate that each button would need to be pressed no more than 100 times to win a prize. How else would someone be expected to play?

Figure out how to win as many prizes as possible. What is the fewest tokens you would have to spend to win all possible prizes?

As a junior developer, I'll break down Problem 25 and provide a detailed explanation and approach:
Problem Breakdown:
We have a list of claw machines, each with two buttons (A and B) and a prize location.
Button A costs 3 tokens, and Button B costs 1 token.
Each button press moves the claw a specific amount in both X and Y directions.
We need to find the minimum number of tokens required to win all possible prizes.
We assume each button needs to be pressed no more than 100 times.
Inputs:
A list of claw machines, each containing:
Button A movement (X, Y)
Button B movement (X, Y)
Prize location (X, Y)
Outputs:
The minimum number of tokens required to win all possible prizes.
Constraints:
Button A costs 3 tokens, Button B costs 1 token.
Each button should be pressed no more than 100 times.
The claw must be positioned exactly above the prize on both X and Y axes.
Approach:
Read the input file and parse the claw machine data.
For each claw machine, try all combinations of button presses (0 to 100 for each button).
Check if a combination of button presses reaches the prize location exactly.
If a prize can be won, calculate the token cost for that combination.
Keep track of the total tokens spent and the number of prizes won.
Return the total tokens spent if all prizes are winnable, or None if some prizes can't be won.

This code reads the input, checks each claw machine to see if its prize can be won, and calculates the total tokens required. It's a straightforward implementation that follows the problem description closely. However, it might be slow for a large number of claw machines or if many button presses are required.

Problem 25 involved calculating the minimum number of tokens required to win prizes from claw machines in an arcade. Each machine had two buttons (A and B) that moved the claw in specific X and Y increments, with button A costing 3 tokens and button B costing 1 token. The goal was to determine the fewest tokens needed to position the claw exactly over the prize for all winnable machines.
The main challenges we initially faced were:
Parsing the input correctly: The input format was more complex than initially assumed, requiring careful splitting and extraction of values.
Handling large numbers: Some prize coordinates were very large, making a brute-force approach inefficient.
Determining winnable machines: Not all machines had prizes that could be reached with the given button configurations.
Efficiently calculating the minimum tokens: A naive approach of trying all button combinations up to 100 presses each was too slow for the full input.
Our eventual solution used a more sophisticated approach:
We used numpy to solve the linear equations representing the button presses required to reach each prize.
The solution involved creating a 2x2 matrix 'a' representing the X and Y movements of buttons A and B, and a vector 'b' representing the prize coordinates.
We used np.linalg.solve(a, b) to find the number of button presses needed for each machine.
If the solution consisted of non-negative integers (within a small tolerance), we considered the prize winnable and calculated the token cost.
We summed up the token costs for all winnable prizes to get the final answer.
This approach efficiently handled the large numbers and quickly determined which prizes were winnable, overcoming the initial challenges we faced. The solution was able to process all 200 claw machines in the input and provide the correct total of 32041 tokens needed to win all possible prizes.

## Problem 2


As you go to win the first prize, you discover that the claw is nowhere near where you expected it would be. Due to a unit conversion error in your measurements, the position of every prize is actually 10000000000000 higher on both the X and Y axis!

Add 10000000000000 to the X and Y position of every prize. After making this change, the example above would now look like this:

Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=10000000008400, Y=10000000005400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=10000000012748, Y=10000000012176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=10000000007870, Y=10000000006450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=10000000018641, Y=10000000010279
Now, it is only possible to win a prize on the second and fourth claw machines. Unfortunately, it will take many more than 100 presses to do so.

Using the corrected prize coordinates, figure out how to win as many prizes as possible. What is the fewest tokens you would have to spend to win all possible prizes?